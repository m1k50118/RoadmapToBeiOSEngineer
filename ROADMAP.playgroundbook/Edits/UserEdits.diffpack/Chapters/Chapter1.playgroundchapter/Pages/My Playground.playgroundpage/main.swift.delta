<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Diff</key>
	<array>
		<dict>
			<key>ModifiedContent</key>
			<string>// # Initialization
struct RocketConfiguration {
    let name: String = "Athena 9 Heavy"
    let numberOfFirstStageCores: Int = 3
    let numberOfSecondStageCores:Int = 1
    let numberOfStageReuseLandingLegs:Int? = nil
}

// 構造体はメンバーごとのinitializerを自動生成してくれる
struct RocketStageConfiguration {
    let propellantMass: Double
    let liquidOxygenMass: Double
    let nominalBurnTime:Int
} 
extension RocketStageConfiguration {
    init(propellantMass: Double, liquidOxygenMass:Double) {
        self.propellantMass = propellantMass
        self.liquidOxygenMass = liquidOxygenMass
        self.nominalBurnTime = 180
    }
}

let athena9Heavy = RocketConfiguration() // default initializer
let stageOneConfiguration = RocketStageConfiguration(propellantMass: 119.1, liquidOxygenMass: 276.0,nominalBurnTime: 180) // extensionすれば全項目イニシャライザも使える

// ## カスタムイニシャライザ
struct Weather {
    let temperatureCelsius: Double
    let windSpeedKilometersPerHour: Double
    
    init(tempertureFahrenheit: Double = 72, windSpeedMilesPerHour: Double = 5) {
        self.temperatureCelsius = (tempertureFahrenheit - 32) / 1.8
        self.windSpeedKilometersPerHour = windSpeedMilesPerHour * 1.609344
    }
}

let currentWeather = Weather(tempertureFahrenheit: 87, windSpeedMilesPerHour: 2)
currentWeather.temperatureCelsius
currentWeather.windSpeedKilometersPerHour

// ## 重複を避けるためにイニシャライザを委譲する
struct GuidanceSensorStatus {
    var currentZAngularVelocityRadiansPerMinute: Double
    var initialZAngularVelocityRadiansPerMinute: Double
    var needsCorrection: Bool
    
    init(zAngularVelocityDegreesPerMinute: Double, needsCorrection: Bool = false) {
        let radiansPerMinute = zAngularVelocityDegreesPerMinute * 0.01745329251994
        self.currentZAngularVelocityRadiansPerMinute = radiansPerMinute
        self.initialZAngularVelocityRadiansPerMinute = radiansPerMinute
        self.needsCorrection = needsCorrection
    }
    // delegationg initializer(委譲イニシャライザ)
    init(zAngularVelocityDegreesPerMinute: Double, needsCorrection: Int) {
        self.init(zAngularVelocityDegreesPerMinute: zAngularVelocityDegreesPerMinute, needsCorrection: (needsCorrection &gt; 0))
    }
}
let guidanceStatus = GuidanceSensorStatus(zAngularVelocityDegreesPerMinute: 2.2)
guidanceStatus.currentZAngularVelocityRadiansPerMinute
guidanceStatus.needsCorrection
// ## 2フェーズのInitializationの動きを観察する
struct CombustionChamberStatus {
    var tempertureKelvin: Double
    var pressureKiloPascals: Double
    
    init(temperatureKelvin: Double, pressureKiloPascals: Double) {
        print("Phase 1 init")
        self.tempertureKelvin = temperatureKelvin
        self.pressureKiloPascals = pressureKiloPascals
        print("CombustionChamberStatus fully initilized")
        print("Phase 2 init")
    }
    
    init(temperatureCelsius: Double, pressureAtmospheric: Double) {
        print("Phase 1 delegating init")
        // デリゲートイニシャライザの間はselfが使用できない
        let temperatureKelvin = temperatureCelsius + 273.15
        let pressureKiloPascals = pressureAtmospheric * 101.325
        self.init(temperatureKelvin: temperatureKelvin, pressureKiloPascals: pressureKiloPascals)
        print("Phase 2 delegating init")
    }
}

CombustionChamberStatus(temperatureCelsius: 32, pressureAtmospheric: 0.96)

// ## 失敗可能なイニシャライザ
// 通常のイニシャライザと異なる点は2つ
// ・オプショナルな値を返すこと
// ・nilを返して初期化の失敗を表現できること
struct TankStatus {
    var currentVolume: Double
    var currentLiquidType: String?
    
    // failable initializer
    init?(currentVolume: Double, currentLiquidType: String?) {
        // 構造体のfailableイニシャライザ内では、いつでもnilを返すことが可能
        if currentVolume &lt; 0 {
            return nil
        }
        if currentVolume &gt; 0 &amp;&amp; currentLiquidType == nil {
            return nil
        }
        self.currentVolume = currentVolume
        self.currentLiquidType = currentLiquidType
    }
}
if let tankStatus = TankStatus(currentVolume: -10.0, currentLiquidType: nil) {
    print("Nice, tank status created.")
} else {
    print("Oh no, an initialization failure occurred.")
}

// ## イニシャライザからThrowsを投げる
enum InvalidAstronautDataError: Error {
    case EmptyName
    case InvalidAge
}

struct Astronaut {
    let name: String
    let age: Int
    
    init(name: String, age: Int) throws {
        if name.isEmpty {
            throw InvalidAstronautDataError.EmptyName
        }
        if age &lt; 18 || age &gt; 70 {
            throw InvalidAstronautDataError.InvalidAge
        }
        self.name = name
        self.age = age
    }
}

let johnny = try? Astronaut(name: "Johnny Cosmoseed", age: 17)

// ## throwing initializersとfailable initializersのどちらを使うべき？
// throwing initializers
// 理由｜Failable initializersは失敗と成功の2値しか表現できない。
// throwing inilializersは失敗の表現だけでなく、特定のエラーに関する理由を表現することが出来るから。
// さらに、呼び出し側のコードがinitializerがなげるエラーを伝搬出来るから。
// エラー型を定義する必要がなく、余計な try? キーワードを使わなくて済む。
// なぜSwiftにはfailable initializersがあるのでしょうか？それは最初のバージョンのSwiftにはthrowing関数が存在しなかったからです。
// 従って、言語は初期化の失敗を管理する方法を必要としていた。

// # クラスの指定イニシャライザ
class RocketComponent {
    let model: String
    let serialNumber: String
    let reusable: Bool
    
    // Init #1a - Designated
    init(model: String, serialNumber: String, reusable: Bool) {
        self.model = model
        self.serialNumber = serialNumber
        self.reusable = reusable
    }
    
    // Init #1b - Convenience
    convenience init(model: String, serialNumber: String) {
        self.init(model: model, serialNumber: serialNumber, reusable: false)
    }
    
    // Init #1c - Designated
    //    init?(identifier: String, reusable: Bool) {
    //        let identifierComponents = identifier.split(separator: "-")
    //        guard identifierComponents.count == 2 else {
    //            return nil
    //        }
    //        self.reusable = reusable
    //        self.model = String(identifierComponents[0])
    //        self.serialNumber = String(identifierComponents[1])
    //    }
    // Init #1c - Convenience
    convenience init?(identifier: String, reusable: Bool) {
        guard let (model, serialNumber) = RocketComponent.decompose(identifier: identifier) else {
            return nil
        }
        self.init(model: model, serialNumber: serialNumber, reusable: reusable)
    }
    
    static func decompose(identifier: String) -&gt; (model: String, serialNumber: String)? {
        let identifierComponents = identifier.split(separator: "-")
        guard identifierComponents.count == 2 else {
            return nil
        }
        return (model: String(identifierComponents[0]), serialNumber: String(identifierComponents[1]))
    }
}
let payload = RocketComponent(model: "RT-1", serialNumber: "234", reusable: false)

// ## Convenience Initializers
let fairing = RocketComponent(model: "Serpent", serialNumber: "0")

// # 失敗可能なイニシャライザとthrowing initializersを設計するいくつかの戦略
// ## 指定イニシャライザからfailing and throwingする
let component = RocketComponent(identifier: "R2-D21", reusable: true)
let nonComponent = RocketComponent(identifier: "", reusable: true)

// # サブクラス
class Tank: RocketComponent {
    var encasingMaterial: String
    
    // init #2a - Designated
    init(model: String, serialNumber: String, reusable: Bool, encasingMaterial: String) {
        self.encasingMaterial = encasingMaterial
        super.init(model: model, serialNumber: serialNumber, reusable: reusable)
    }
    // Init #2b - Designated
    override init(model: String, serialNumber: String, reusable: Bool) {
        self.encasingMaterial = "Aluminum"
        super.init(model: model, serialNumber: serialNumber, reusable: reusable)
    }
}

class LiquidTank: Tank {
    let liquidType: String
    
    // Init #3a - Designated
    init(model: String, serialNumber: String, reusable: Bool, encasingMaterial: String, liquidType: String) {
        self.liquidType = liquidType
        super.init(model: model, serialNumber: serialNumber, reusable: reusable, encasingMaterial: encasingMaterial)
    }
    
    // Init #3b - Convenience
    convenience init(model: String, serialNumberInt: Int, reusable: Bool, encasingMaterial: String, liquidType: String) {
        let serialNumber = String(serialNumberInt)
        self.init(model: model, serialNumber: serialNumber, reusable: reusable, encasingMaterial: encasingMaterial, liquidType: liquidType)
    }
    
    // Init #3c - Convenience
    convenience init(model: String, serialNumberInt: Int, reusable: Int, encasingMaterial: String, liquidType: String) {
        let reusable = reusable &gt; 0
        self.init(model: model, serialNumberInt: serialNumberInt, reusable: reusable, encasingMaterial: encasingMaterial, liquidType: liquidType)
    }
    
    // Init #3d - Convenience
    convenience override init(model: String, serialNumber: String, reusable: Bool) {
        self.init(model: model, serialNumber: serialNumber, reusable: reusable, encasingMaterial: "Aluminum", liquidType: "LOX")
    }
    
    // Init #3e - Convenience
    convenience override init(model: String, serialNumber: String, reusable: Bool, encasingMaterial: String) {
        self.init(model: model, serialNumber: serialNumber, reusable: reusable, encasingMaterial: "Aluminum")
    }
    
    // Init #3f - Convenience
    convenience init?(identifier: String, reusable: Bool, encasingMaterial: String, liquidType: String) {
        guard let (model, serialNumber) = RocketComponent.decompose(identifier: identifier) else {
            return nil
        }
        self.init(model: model, serialNumber: serialNumber, reusable: reusable, encasingMaterial: encasingMaterial, liquidType: liquidType)
    }
}
// RocketComponentのoverride designated init
let fuelTank = Tank(model: "Athena", serialNumber: "003", reusable: true)
// RocketComponentのConvenienceイニシャライザ
let liquidOxygenTank = Tank(identifier: "LOX-012", reusable: true)
let rp1Tank = LiquidTank(model: "Hermes", serialNumberInt: 5, reusable: 1, encasingMaterial: "Aluminum", liquidType: "LOX")
let loxTank = LiquidTank(identifier: "LOX-1", reusable: true)
let athenaFuelTank = LiquidTank(identifier: "Athena-9", reusable: true, encasingMaterial: "Aluminum", liquidType: "RP-1")
</string>
			<key>ModifiedRange</key>
			<string>{0, 10073}</string>
			<key>OriginalContent</key>
			<string>
</string>
			<key>OriginalRange</key>
			<string>{0, 1}</string>
		</dict>
	</array>
	<key>File</key>
	<string>Chapters/Chapter1.playgroundchapter/Pages/My Playground.playgroundpage/main.swift</string>
</dict>
</plist>
